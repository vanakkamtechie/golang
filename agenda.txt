
Agenda:
	Getting Started
		* Go Installation
		* IDE Installation and setup
		* Git bash installation
		    go run
			go build
			go install
			go env
			GOPATH
			GOROOT
			
	Go Workspaces
		bin , packages, src
		Go path -> indicate the Go workspace
		GO ROOT -> Installation path of GO, location of go SDK
	* packages
	   go install <package dir path from src folder>
	   Ref. https://medium.com/rungo/everything-you-need-to-know-about-packages-in-go-b8bac62b74cc
	* constants and variables
	* conditionals
	   if
	   else if
	   switch
	   breaking and fallthrough	   
	* loops
	    for loops
		for <exp>
		for range
		break and continue
	* Arrays and slices
	        General Declarations, Zero value of array, Short variable declaration, Initialize array with value in the same line and with multiline(comma is necessary),
			details about automatic array length declaration(...) , len function, iteration over array, range , multidimentional array, pass by value
		  Slices : 
			https://medium.com/rungo/the-anatomy-of-slices-in-go-6450e3bb2b94
	* pointers
	* type conversions
	* structs
	    blueprint is nothing but schema containing the blueprint of data a structure will hold.
		variable Declaration, zero value, assign values in the same order which is defined in the structs, initializing values with name,Pointer to a struct,
		nested structure,Promoted fields(child struct variables can be accessible by parent struct)
		https://medium.com/rungo/structures-in-go-76377cc106a2
	* functions and methods
		function vs method diff, syntax of methods,how to call method using struct type, pointer receiver to change the value of struct variable,
		pointer dereferencing syntax (*e), Methods on nested struct,Promoted Fields, calling method receiver with pointer and without pointer,
		pointer receiver accepts any datatype, Methods on non-struct type
		https://medium.com/rungo/anatomy-of-methods-in-go-f552aaa8ac4a
	* interfaces
		Declaring interface, Implementing interface, Empty interface(All type by default implements the empty interface),Type assertion,
		Embedding interfaces (add two interface in to another interface),
		Pointer vs Value receiver,
		https://medium.com/rungo/interfaces-in-go-ab1601159b3a
	* init functions
	
	* maps
	
	* defer, panic and recover
	
	* Concurrency
	    sync.WaitGroup
		GOMAXPROCS
		Go scheduler
	* Modules
	    https://medium.com/@fonseka.live/getting-started-with-go-modules-b3dac652066d
		https://blog.golang.org/using-go-modules
	    creating and maitaining modules
		   * initializing the modules -- go mod init
		   * Retrieving the dependencies -- go get 
		   * listing dependencies   -- go list -m all
		   * removing unused dependencies -- go mod tidy
		Go mod
	* testing & benchmarking in Go
	* Packaging & Imports
		Directory layout
	* Methods and interfaces
		Other built-in packages
			flag
			os
	* Error handling
		https://medium.com/rungo/error-handling-in-go-f0125de052f0
			
	Why Go:
		https://medium.com/@kevalpatel2106/why-should-you-learn-go-f607681fad65#.qu6he77fy
	Go Workspaces:
		https://www.callicoder.com/golang-installation-setup-gopath-workspace/
	
	End to End Sample Program: 
	https://levelup.gitconnected.com/crud-restful-api-with-go-gorm-jwt-postgres-mysql-and-testing-460a85ab7121	